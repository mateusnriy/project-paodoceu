// backend/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PerfilUsuario {
  MASTER
  ADMINISTRADOR
  ATENDENTE
}

enum StatusPedido {
  PENDENTE
  PRONTO
  ENTREGUE
  CANCELADO
}

enum MetodoPagamento {
  DINHEIRO
  CARTAO_CREDITO
  CARTAO_DEBITO
  PIX
}

model Usuario {
  id            String        @id @default(uuid())
  nome          String
  email         String        @unique
  senha         String
  perfil        PerfilUsuario @default(ATENDENTE)
  ativo         Boolean       @default(false)
  criado_em     DateTime      @default(now()) @map("criado_em")
  atualizado_em DateTime      @updatedAt @map("atualizado_em")
  pedidos       Pedido[] // Relação com pedidos atendidos por este usuário

  @@map("usuarios")
}

model Categoria {
  id            String    @id @default(uuid())
  nome          String    @unique // Nome da categoria deve ser único
  criado_em     DateTime  @default(now()) @map("criado_em")
  atualizado_em DateTime  @updatedAt @map("atualizado_em")
  produtos      Produto[] // Relação com produtos desta categoria

  @@map("categorias")
}

model Produto {
  id            String       @id @default(uuid())
  nome          String
  descricao     String?
  preco         Decimal      @db.Decimal(10, 2)
  estoque       Int          @default(0)
  imagem_url    String?      @map("imagem_url")
  ativo         Boolean      @default(true)
  categoria_id  String       @map("categoria_id")
  criado_em     DateTime     @default(now()) @map("criado_em")
  atualizado_em DateTime     @updatedAt @map("atualizado_em")
  categoria     Categoria    @relation(fields: [categoria_id], references: [id])
  itens_pedido  ItemPedido[]

  @@map("produtos")
}

model Pedido {
  id                    String       @id @default(uuid())
  numero_sequencial_dia Int          @map("numero_sequencial_dia")
  valor_total           Decimal      @db.Decimal(10, 2) @map("valor_total")
  cliente_nome          String?      @map("cliente_nome")
  status                StatusPedido @default(PENDENTE)
  criado_em             DateTime     @default(now()) @map("criado_em")
  atualizado_em         DateTime     @updatedAt @map("atualizado_em")
  atendente_id          String?      @map("atendente_id")
  atendente             Usuario?     @relation(fields: [atendente_id], references: [id], onDelete: SetNull)
  itens                 ItemPedido[]
  pagamento             Pagamento?

  @@map("pedidos")
}

model ItemPedido {
  id             String  @id @default(uuid())
  pedido_id      String  @map("pedido_id")
  produto_id     String  @map("produto_id")
  quantidade     Int
  preco_unitario Decimal @db.Decimal(10, 2) @map("preco_unitario")
  subtotal       Decimal @db.Decimal(10, 2)
  pedido         Pedido  @relation(fields: [pedido_id], references: [id], onDelete: Cascade)
  produto        Produto @relation(fields: [produto_id], references: [id], onDelete: Restrict)

  @@map("itens_pedido")
}

model Pagamento {
  id          String          @id @default(uuid())
  pedido_id   String          @unique @map("pedido_id")
  metodo      MetodoPagamento
  valor_pago  Decimal         @db.Decimal(10, 2) @map("valor_pago")
  troco       Decimal         @default(0) @db.Decimal(10, 2)
  criado_em   DateTime        @default(now()) @map("criado_em")
  pedido      Pedido          @relation(fields: [pedido_id], references: [id], onDelete: Cascade)

  @@map("pagamentos")
}

// REMOVIDO: Modelo PasswordResetToken
