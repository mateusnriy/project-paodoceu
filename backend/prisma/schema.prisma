// prisma/schema.prisma

// Este é o datasource, que aponta para as variáveis de ambiente.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// O gerador de cliente Prisma, que cria o cliente TypeScript.
generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum PerfilUsuario {
  ADMINISTRADOR
  ATENDENTE
}

enum StatusPedido {
  PENDENTE
  PRONTO
  ENTREGUE
  CANCELADO
}

enum MetodoPagamento {
  DINHEIRO
  CARTAO_CREDITO
  CARTAO_DEBITO
  PIX
}

// --- MODELS ---

model Usuario {
  id            String        @id @default(uuid())
  nome          String
  email         String        @unique
  senha         String
  perfil        PerfilUsuario @default(ATENDENTE)
  criado_em     DateTime      @default(now())
  atualizado_em DateTime      @updatedAt
  pedidos       Pedido[]      // Relacionamento: Um usuário pode ter vários pedidos.

  @@map("usuarios")
}

model Categoria {
  id            String    @id @default(uuid())
  nome          String    @unique
  produtos      Produto[] // Relacionamento: Uma categoria tem vários produtos.
  criado_em     DateTime  @default(now())
  atualizado_em DateTime  @updatedAt

  @@map("categorias")
}

model Produto {
  id           String      @id @default(uuid())
  nome         String
  descricao    String?
  preco        Float
  estoque      Int         @default(0)
  categoria_id String
  categoria    Categoria   @relation(fields: [categoria_id], references: [id])
  criado_em    DateTime    @default(now())
  atualizado_em DateTime   @updatedAt
  itens_pedido ItemPedido[]

  @@map("produtos")
}

model Pedido {
  id                    String       @id @default(uuid())
  numero_sequencial_dia Int
  valor_total           Float
  cliente_nome          String?
  status                StatusPedido @default(PENDENTE)
  criado_em             DateTime     @default(now())
  atualizado_em         DateTime     @updatedAt
  
  // --- CAMPO ADICIONADO ---
  // Relacionamento com o usuário que registrou o pedido.
  atendente_id          String?
  atendente             Usuario?     @relation(fields: [atendente_id], references: [id])
  
  itens                 ItemPedido[]
  pagamento             Pagamento?

  @@map("pedidos")
}

model ItemPedido {
  id           String  @id @default(uuid())
  pedido_id    String
  pedido       Pedido  @relation(fields: [pedido_id], references: [id])
  produto_id   String
  produto      Produto @relation(fields: [produto_id], references: [id])
  quantidade   Int
  preco_unitario Float
  subtotal     Float

  @@map("itens_pedido")
}

model Pagamento {
  id         String          @id @default(uuid())
  pedido_id  String          @unique
  pedido     Pedido          @relation(fields: [pedido_id], references: [id])
  metodo     MetodoPagamento
  valor_pago Float
  troco      Float           @default(0)
  criado_em  DateTime        @default(now())

  @@map("pagamentos")
}
